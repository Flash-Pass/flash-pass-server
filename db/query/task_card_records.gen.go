// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Flash-Pass/flash-pass-server/db/model"
)

func newTaskCardRecord(db *gorm.DB, opts ...gen.DOOption) taskCardRecord {
	_taskCardRecord := taskCardRecord{}

	_taskCardRecord.taskCardRecordDo.UseDB(db, opts...)
	_taskCardRecord.taskCardRecordDo.UseModel(&model.TaskCardRecord{})

	tableName := _taskCardRecord.taskCardRecordDo.TableName()
	_taskCardRecord.ALL = field.NewAsterisk(tableName)
	_taskCardRecord.Id = field.NewInt64(tableName, "id")
	_taskCardRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_taskCardRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_taskCardRecord.IsDeleted = field.NewBool(tableName, "is_deleted")
	_taskCardRecord.TaskId = field.NewInt64(tableName, "task_id")
	_taskCardRecord.UserId = field.NewInt64(tableName, "user_id")
	_taskCardRecord.CardId = field.NewInt64(tableName, "card_id")
	_taskCardRecord.Date = field.NewString(tableName, "date")
	_taskCardRecord.Timestamp = field.NewInt64(tableName, "timestamp")
	_taskCardRecord.IsViewed = field.NewBool(tableName, "is_viewed")
	_taskCardRecord.Card = taskCardRecordBelongsToCard{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Card", "model.Card"),
	}

	_taskCardRecord.fillFieldMap()

	return _taskCardRecord
}

type taskCardRecord struct {
	taskCardRecordDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool
	TaskId    field.Int64
	UserId    field.Int64
	CardId    field.Int64
	Date      field.String
	Timestamp field.Int64
	IsViewed  field.Bool
	Card      taskCardRecordBelongsToCard

	fieldMap map[string]field.Expr
}

func (t taskCardRecord) Table(newTableName string) *taskCardRecord {
	t.taskCardRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t taskCardRecord) As(alias string) *taskCardRecord {
	t.taskCardRecordDo.DO = *(t.taskCardRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *taskCardRecord) updateTableName(table string) *taskCardRecord {
	t.ALL = field.NewAsterisk(table)
	t.Id = field.NewInt64(table, "id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.IsDeleted = field.NewBool(table, "is_deleted")
	t.TaskId = field.NewInt64(table, "task_id")
	t.UserId = field.NewInt64(table, "user_id")
	t.CardId = field.NewInt64(table, "card_id")
	t.Date = field.NewString(table, "date")
	t.Timestamp = field.NewInt64(table, "timestamp")
	t.IsViewed = field.NewBool(table, "is_viewed")

	t.fillFieldMap()

	return t
}

func (t *taskCardRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *taskCardRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["is_deleted"] = t.IsDeleted
	t.fieldMap["task_id"] = t.TaskId
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["card_id"] = t.CardId
	t.fieldMap["date"] = t.Date
	t.fieldMap["timestamp"] = t.Timestamp
	t.fieldMap["is_viewed"] = t.IsViewed

}

func (t taskCardRecord) clone(db *gorm.DB) taskCardRecord {
	t.taskCardRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t taskCardRecord) replaceDB(db *gorm.DB) taskCardRecord {
	t.taskCardRecordDo.ReplaceDB(db)
	return t
}

type taskCardRecordBelongsToCard struct {
	db *gorm.DB

	field.RelationField
}

func (a taskCardRecordBelongsToCard) Where(conds ...field.Expr) *taskCardRecordBelongsToCard {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a taskCardRecordBelongsToCard) WithContext(ctx context.Context) *taskCardRecordBelongsToCard {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a taskCardRecordBelongsToCard) Session(session *gorm.Session) *taskCardRecordBelongsToCard {
	a.db = a.db.Session(session)
	return &a
}

func (a taskCardRecordBelongsToCard) Model(m *model.TaskCardRecord) *taskCardRecordBelongsToCardTx {
	return &taskCardRecordBelongsToCardTx{a.db.Model(m).Association(a.Name())}
}

type taskCardRecordBelongsToCardTx struct{ tx *gorm.Association }

func (a taskCardRecordBelongsToCardTx) Find() (result *model.Card, err error) {
	return result, a.tx.Find(&result)
}

func (a taskCardRecordBelongsToCardTx) Append(values ...*model.Card) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a taskCardRecordBelongsToCardTx) Replace(values ...*model.Card) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a taskCardRecordBelongsToCardTx) Delete(values ...*model.Card) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a taskCardRecordBelongsToCardTx) Clear() error {
	return a.tx.Clear()
}

func (a taskCardRecordBelongsToCardTx) Count() int64 {
	return a.tx.Count()
}

type taskCardRecordDo struct{ gen.DO }

type ITaskCardRecordDo interface {
	gen.SubQuery
	Debug() ITaskCardRecordDo
	WithContext(ctx context.Context) ITaskCardRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITaskCardRecordDo
	WriteDB() ITaskCardRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITaskCardRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITaskCardRecordDo
	Not(conds ...gen.Condition) ITaskCardRecordDo
	Or(conds ...gen.Condition) ITaskCardRecordDo
	Select(conds ...field.Expr) ITaskCardRecordDo
	Where(conds ...gen.Condition) ITaskCardRecordDo
	Order(conds ...field.Expr) ITaskCardRecordDo
	Distinct(cols ...field.Expr) ITaskCardRecordDo
	Omit(cols ...field.Expr) ITaskCardRecordDo
	Join(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo
	Group(cols ...field.Expr) ITaskCardRecordDo
	Having(conds ...gen.Condition) ITaskCardRecordDo
	Limit(limit int) ITaskCardRecordDo
	Offset(offset int) ITaskCardRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskCardRecordDo
	Unscoped() ITaskCardRecordDo
	Create(values ...*model.TaskCardRecord) error
	CreateInBatches(values []*model.TaskCardRecord, batchSize int) error
	Save(values ...*model.TaskCardRecord) error
	First() (*model.TaskCardRecord, error)
	Take() (*model.TaskCardRecord, error)
	Last() (*model.TaskCardRecord, error)
	Find() ([]*model.TaskCardRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskCardRecord, err error)
	FindInBatches(result *[]*model.TaskCardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TaskCardRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITaskCardRecordDo
	Assign(attrs ...field.AssignExpr) ITaskCardRecordDo
	Joins(fields ...field.RelationField) ITaskCardRecordDo
	Preload(fields ...field.RelationField) ITaskCardRecordDo
	FirstOrInit() (*model.TaskCardRecord, error)
	FirstOrCreate() (*model.TaskCardRecord, error)
	FindByPage(offset int, limit int) (result []*model.TaskCardRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITaskCardRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetBySearchAndUserId(search string, userId int64) (result []*model.TaskCardRecord, err error)
}

// SELECT * FROM @@table WHERE question LIKE concat("%", @search,"%") OR answer LIKE concat("%", @search,"%") OR created_by = @userId
func (t taskCardRecordDo) GetBySearchAndUserId(search string, userId int64) (result []*model.TaskCardRecord, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, search)
	params = append(params, search)
	params = append(params, userId)
	generateSQL.WriteString("SELECT * FROM task_card_records WHERE question LIKE concat(\"%\", ?,\"%\") OR answer LIKE concat(\"%\", ?,\"%\") OR created_by = ? ")

	var executeSQL *gorm.DB
	executeSQL = t.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (t taskCardRecordDo) Debug() ITaskCardRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t taskCardRecordDo) WithContext(ctx context.Context) ITaskCardRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t taskCardRecordDo) ReadDB() ITaskCardRecordDo {
	return t.Clauses(dbresolver.Read)
}

func (t taskCardRecordDo) WriteDB() ITaskCardRecordDo {
	return t.Clauses(dbresolver.Write)
}

func (t taskCardRecordDo) Session(config *gorm.Session) ITaskCardRecordDo {
	return t.withDO(t.DO.Session(config))
}

func (t taskCardRecordDo) Clauses(conds ...clause.Expression) ITaskCardRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t taskCardRecordDo) Returning(value interface{}, columns ...string) ITaskCardRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t taskCardRecordDo) Not(conds ...gen.Condition) ITaskCardRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t taskCardRecordDo) Or(conds ...gen.Condition) ITaskCardRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t taskCardRecordDo) Select(conds ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t taskCardRecordDo) Where(conds ...gen.Condition) ITaskCardRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t taskCardRecordDo) Order(conds ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t taskCardRecordDo) Distinct(cols ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t taskCardRecordDo) Omit(cols ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t taskCardRecordDo) Join(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t taskCardRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t taskCardRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t taskCardRecordDo) Group(cols ...field.Expr) ITaskCardRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t taskCardRecordDo) Having(conds ...gen.Condition) ITaskCardRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t taskCardRecordDo) Limit(limit int) ITaskCardRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t taskCardRecordDo) Offset(offset int) ITaskCardRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t taskCardRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITaskCardRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t taskCardRecordDo) Unscoped() ITaskCardRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t taskCardRecordDo) Create(values ...*model.TaskCardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t taskCardRecordDo) CreateInBatches(values []*model.TaskCardRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t taskCardRecordDo) Save(values ...*model.TaskCardRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t taskCardRecordDo) First() (*model.TaskCardRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskCardRecord), nil
	}
}

func (t taskCardRecordDo) Take() (*model.TaskCardRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskCardRecord), nil
	}
}

func (t taskCardRecordDo) Last() (*model.TaskCardRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskCardRecord), nil
	}
}

func (t taskCardRecordDo) Find() ([]*model.TaskCardRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TaskCardRecord), err
}

func (t taskCardRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TaskCardRecord, err error) {
	buf := make([]*model.TaskCardRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t taskCardRecordDo) FindInBatches(result *[]*model.TaskCardRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t taskCardRecordDo) Attrs(attrs ...field.AssignExpr) ITaskCardRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t taskCardRecordDo) Assign(attrs ...field.AssignExpr) ITaskCardRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t taskCardRecordDo) Joins(fields ...field.RelationField) ITaskCardRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t taskCardRecordDo) Preload(fields ...field.RelationField) ITaskCardRecordDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t taskCardRecordDo) FirstOrInit() (*model.TaskCardRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskCardRecord), nil
	}
}

func (t taskCardRecordDo) FirstOrCreate() (*model.TaskCardRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TaskCardRecord), nil
	}
}

func (t taskCardRecordDo) FindByPage(offset int, limit int) (result []*model.TaskCardRecord, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t taskCardRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t taskCardRecordDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t taskCardRecordDo) Delete(models ...*model.TaskCardRecord) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *taskCardRecordDo) withDO(do gen.Dao) *taskCardRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
