// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Flash-Pass/flash-pass-server/db/model"
)

func newBookCard(db *gorm.DB, opts ...gen.DOOption) bookCard {
	_bookCard := bookCard{}

	_bookCard.bookCardDo.UseDB(db, opts...)
	_bookCard.bookCardDo.UseModel(&model.BookCard{})

	tableName := _bookCard.bookCardDo.TableName()
	_bookCard.ALL = field.NewAsterisk(tableName)
	_bookCard.Id = field.NewInt64(tableName, "id")
	_bookCard.CreatedAt = field.NewTime(tableName, "created_at")
	_bookCard.UpdatedAt = field.NewTime(tableName, "updated_at")
	_bookCard.IsDeleted = field.NewBool(tableName, "is_deleted")
	_bookCard.BookId = field.NewInt64(tableName, "book_id")
	_bookCard.CardId = field.NewInt64(tableName, "card_id")
	_bookCard.CreatedBy = field.NewInt64(tableName, "created_by")

	_bookCard.fillFieldMap()

	return _bookCard
}

type bookCard struct {
	bookCardDo

	ALL       field.Asterisk
	Id        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	IsDeleted field.Bool
	BookId    field.Int64
	CardId    field.Int64
	CreatedBy field.Int64

	fieldMap map[string]field.Expr
}

func (b bookCard) Table(newTableName string) *bookCard {
	b.bookCardDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bookCard) As(alias string) *bookCard {
	b.bookCardDo.DO = *(b.bookCardDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bookCard) updateTableName(table string) *bookCard {
	b.ALL = field.NewAsterisk(table)
	b.Id = field.NewInt64(table, "id")
	b.CreatedAt = field.NewTime(table, "created_at")
	b.UpdatedAt = field.NewTime(table, "updated_at")
	b.IsDeleted = field.NewBool(table, "is_deleted")
	b.BookId = field.NewInt64(table, "book_id")
	b.CardId = field.NewInt64(table, "card_id")
	b.CreatedBy = field.NewInt64(table, "created_by")

	b.fillFieldMap()

	return b
}

func (b *bookCard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bookCard) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["id"] = b.Id
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["is_deleted"] = b.IsDeleted
	b.fieldMap["book_id"] = b.BookId
	b.fieldMap["card_id"] = b.CardId
	b.fieldMap["created_by"] = b.CreatedBy
}

func (b bookCard) clone(db *gorm.DB) bookCard {
	b.bookCardDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bookCard) replaceDB(db *gorm.DB) bookCard {
	b.bookCardDo.ReplaceDB(db)
	return b
}

type bookCardDo struct{ gen.DO }

type IBookCardDo interface {
	gen.SubQuery
	Debug() IBookCardDo
	WithContext(ctx context.Context) IBookCardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBookCardDo
	WriteDB() IBookCardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBookCardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBookCardDo
	Not(conds ...gen.Condition) IBookCardDo
	Or(conds ...gen.Condition) IBookCardDo
	Select(conds ...field.Expr) IBookCardDo
	Where(conds ...gen.Condition) IBookCardDo
	Order(conds ...field.Expr) IBookCardDo
	Distinct(cols ...field.Expr) IBookCardDo
	Omit(cols ...field.Expr) IBookCardDo
	Join(table schema.Tabler, on ...field.Expr) IBookCardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBookCardDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBookCardDo
	Group(cols ...field.Expr) IBookCardDo
	Having(conds ...gen.Condition) IBookCardDo
	Limit(limit int) IBookCardDo
	Offset(offset int) IBookCardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBookCardDo
	Unscoped() IBookCardDo
	Create(values ...*model.BookCard) error
	CreateInBatches(values []*model.BookCard, batchSize int) error
	Save(values ...*model.BookCard) error
	First() (*model.BookCard, error)
	Take() (*model.BookCard, error)
	Last() (*model.BookCard, error)
	Find() ([]*model.BookCard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookCard, err error)
	FindInBatches(result *[]*model.BookCard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BookCard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBookCardDo
	Assign(attrs ...field.AssignExpr) IBookCardDo
	Joins(fields ...field.RelationField) IBookCardDo
	Preload(fields ...field.RelationField) IBookCardDo
	FirstOrInit() (*model.BookCard, error)
	FirstOrCreate() (*model.BookCard, error)
	FindByPage(offset int, limit int) (result []*model.BookCard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBookCardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetBySearchAndUserId(search string, userId int64) (result []*model.BookCard, err error)
}

// SELECT * FROM @@table WHERE question LIKE concat("%", @search,"%") OR answer LIKE concat("%", @search,"%") OR created_by = @userId
func (b bookCardDo) GetBySearchAndUserId(search string, userId int64) (result []*model.BookCard, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, search)
	params = append(params, search)
	params = append(params, userId)
	generateSQL.WriteString("SELECT * FROM book_cards WHERE question LIKE concat(\"%\", ?,\"%\") OR answer LIKE concat(\"%\", ?,\"%\") OR created_by = ? ")

	var executeSQL *gorm.DB
	executeSQL = b.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (b bookCardDo) Debug() IBookCardDo {
	return b.withDO(b.DO.Debug())
}

func (b bookCardDo) WithContext(ctx context.Context) IBookCardDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bookCardDo) ReadDB() IBookCardDo {
	return b.Clauses(dbresolver.Read)
}

func (b bookCardDo) WriteDB() IBookCardDo {
	return b.Clauses(dbresolver.Write)
}

func (b bookCardDo) Session(config *gorm.Session) IBookCardDo {
	return b.withDO(b.DO.Session(config))
}

func (b bookCardDo) Clauses(conds ...clause.Expression) IBookCardDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bookCardDo) Returning(value interface{}, columns ...string) IBookCardDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bookCardDo) Not(conds ...gen.Condition) IBookCardDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bookCardDo) Or(conds ...gen.Condition) IBookCardDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bookCardDo) Select(conds ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bookCardDo) Where(conds ...gen.Condition) IBookCardDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bookCardDo) Order(conds ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bookCardDo) Distinct(cols ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bookCardDo) Omit(cols ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bookCardDo) Join(table schema.Tabler, on ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bookCardDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bookCardDo) RightJoin(table schema.Tabler, on ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bookCardDo) Group(cols ...field.Expr) IBookCardDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bookCardDo) Having(conds ...gen.Condition) IBookCardDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bookCardDo) Limit(limit int) IBookCardDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bookCardDo) Offset(offset int) IBookCardDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bookCardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBookCardDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bookCardDo) Unscoped() IBookCardDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bookCardDo) Create(values ...*model.BookCard) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bookCardDo) CreateInBatches(values []*model.BookCard, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bookCardDo) Save(values ...*model.BookCard) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bookCardDo) First() (*model.BookCard, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookCard), nil
	}
}

func (b bookCardDo) Take() (*model.BookCard, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookCard), nil
	}
}

func (b bookCardDo) Last() (*model.BookCard, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookCard), nil
	}
}

func (b bookCardDo) Find() ([]*model.BookCard, error) {
	result, err := b.DO.Find()
	return result.([]*model.BookCard), err
}

func (b bookCardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BookCard, err error) {
	buf := make([]*model.BookCard, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bookCardDo) FindInBatches(result *[]*model.BookCard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bookCardDo) Attrs(attrs ...field.AssignExpr) IBookCardDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bookCardDo) Assign(attrs ...field.AssignExpr) IBookCardDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bookCardDo) Joins(fields ...field.RelationField) IBookCardDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bookCardDo) Preload(fields ...field.RelationField) IBookCardDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bookCardDo) FirstOrInit() (*model.BookCard, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookCard), nil
	}
}

func (b bookCardDo) FirstOrCreate() (*model.BookCard, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BookCard), nil
	}
}

func (b bookCardDo) FindByPage(offset int, limit int) (result []*model.BookCard, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bookCardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bookCardDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bookCardDo) Delete(models ...*model.BookCard) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bookCardDo) withDO(do gen.Dao) *bookCardDo {
	b.DO = *do.(*gen.DO)
	return b
}
