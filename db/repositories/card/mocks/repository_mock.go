// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package CardRepositoryMocks is a generated GoMock package.
package CardRepositoryMocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Flash-Pass/flash-pass-server/db/model"
	query "github.com/Flash-Pass/flash-pass-server/db/query"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
	field "gorm.io/gen/field"
	gorm "gorm.io/gorm"
	clause "gorm.io/gorm/clause"
	schema "gorm.io/gorm/schema"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(c *gin.Context, card *model.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(ctx, card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), ctx, card)
}

// Delete mocks base method.
func (m *MockIRepository) Delete(c *gin.Context, cardId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cardId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder) Delete(ctx, cardId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), ctx, cardId, userId)
}

// GetById mocks base method.
func (m *MockIRepository) GetById(c *gin.Context, cardId int64) (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, cardId)
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(ctx, cardId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), ctx, cardId)
}

// GetList mocks base method.
func (m *MockIRepository) GetList(c *gin.Context, search string, userId int64) ([]*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, search, userId)
	ret0, _ := ret[0].([]*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockIRepositoryMockRecorder) GetList(ctx, search, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockIRepository)(nil).GetList), ctx, search, userId)
}

// Update mocks base method.
func (m *MockIRepository) Update(c *gin.Context, cardId int64, question, answer string) (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, cardId, question, answer)
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(ctx, cardId, question, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), ctx, cardId, question, answer)
}

// MockICard is a mock of ICard interface.
type MockICard struct {
	ctrl     *gomock.Controller
	recorder *MockICardMockRecorder
}

// MockICardMockRecorder is the mock recorder for MockICard.
type MockICardMockRecorder struct {
	mock *MockICard
}

// NewMockICard creates a new mock instance.
func NewMockICard(ctrl *gomock.Controller) *MockICard {
	mock := &MockICard{ctrl: ctrl}
	mock.recorder = &MockICardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICard) EXPECT() *MockICardMockRecorder {
	return m.recorder
}

// As mocks base method.
func (m *MockICard) As(alias string) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "As", alias)
	ret0, _ := ret[0].(gen.Dao)
	return ret0
}

// As indicates an expected call of As.
func (mr *MockICardMockRecorder) As(alias interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "As", reflect.TypeOf((*MockICard)(nil).As), alias)
}

// Assign mocks base method.
func (m *MockICard) Assign(attrs ...field.AssignExpr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockICardMockRecorder) Assign(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockICard)(nil).Assign), attrs...)
}

// Attrs mocks base method.
func (m *MockICard) Attrs(attrs ...field.AssignExpr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attrs", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Attrs indicates an expected call of Attrs.
func (mr *MockICardMockRecorder) Attrs(attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attrs", reflect.TypeOf((*MockICard)(nil).Attrs), attrs...)
}

// BeCond mocks base method.
func (m *MockICard) BeCond() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeCond")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// BeCond indicates an expected call of BeCond.
func (mr *MockICardMockRecorder) BeCond() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeCond", reflect.TypeOf((*MockICard)(nil).BeCond))
}

// Clauses mocks base method.
func (m *MockICard) Clauses(conds ...clause.Expression) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Clauses", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Clauses indicates an expected call of Clauses.
func (mr *MockICardMockRecorder) Clauses(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clauses", reflect.TypeOf((*MockICard)(nil).Clauses), conds...)
}

// Columns mocks base method.
func (m *MockICard) Columns(cols ...field.Expr) gen.Columns {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Columns", varargs...)
	ret0, _ := ret[0].(gen.Columns)
	return ret0
}

// Columns indicates an expected call of Columns.
func (mr *MockICardMockRecorder) Columns(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockICard)(nil).Columns), cols...)
}

// CondError mocks base method.
func (m *MockICard) CondError() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CondError")
	ret0, _ := ret[0].(error)
	return ret0
}

// CondError indicates an expected call of CondError.
func (mr *MockICardMockRecorder) CondError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CondError", reflect.TypeOf((*MockICard)(nil).CondError))
}

// Count mocks base method.
func (m *MockICard) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockICardMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockICard)(nil).Count))
}

// Create mocks base method.
func (m *MockICard) Create(values ...*model.Card) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICardMockRecorder) Create(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICard)(nil).Create), values...)
}

// CreateInBatches mocks base method.
func (m *MockICard) CreateInBatches(values []*model.Card, batchSize int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInBatches", values, batchSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInBatches indicates an expected call of CreateInBatches.
func (mr *MockICardMockRecorder) CreateInBatches(values, batchSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInBatches", reflect.TypeOf((*MockICard)(nil).CreateInBatches), values, batchSize)
}

// Debug mocks base method.
func (m *MockICard) Debug() query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug")
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockICardMockRecorder) Debug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockICard)(nil).Debug))
}

// Delete mocks base method.
func (m *MockICard) Delete(arg0 ...*model.Card) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockICardMockRecorder) Delete(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICard)(nil).Delete), arg0...)
}

// Distinct mocks base method.
func (m *MockICard) Distinct(cols ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Distinct", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Distinct indicates an expected call of Distinct.
func (mr *MockICardMockRecorder) Distinct(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distinct", reflect.TypeOf((*MockICard)(nil).Distinct), cols...)
}

// Find mocks base method.
func (m *MockICard) Find() ([]*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find")
	ret0, _ := ret[0].([]*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockICardMockRecorder) Find() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICard)(nil).Find))
}

// FindByPage mocks base method.
func (m *MockICard) FindByPage(offset, limit int) ([]*model.Card, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPage", offset, limit)
	ret0, _ := ret[0].([]*model.Card)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByPage indicates an expected call of FindByPage.
func (mr *MockICardMockRecorder) FindByPage(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPage", reflect.TypeOf((*MockICard)(nil).FindByPage), offset, limit)
}

// FindInBatch mocks base method.
func (m *MockICard) FindInBatch(batchSize int, fc func(gen.Dao, int) error) ([]*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatch", batchSize, fc)
	ret0, _ := ret[0].([]*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInBatch indicates an expected call of FindInBatch.
func (mr *MockICardMockRecorder) FindInBatch(batchSize, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatch", reflect.TypeOf((*MockICard)(nil).FindInBatch), batchSize, fc)
}

// FindInBatches mocks base method.
func (m *MockICard) FindInBatches(result *[]*model.Card, batchSize int, fc func(gen.Dao, int) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInBatches", result, batchSize, fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindInBatches indicates an expected call of FindInBatches.
func (mr *MockICardMockRecorder) FindInBatches(result, batchSize, fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInBatches", reflect.TypeOf((*MockICard)(nil).FindInBatches), result, batchSize, fc)
}

// First mocks base method.
func (m *MockICard) First() (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "First")
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// First indicates an expected call of First.
func (mr *MockICardMockRecorder) First() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockICard)(nil).First))
}

// FirstOrCreate mocks base method.
func (m *MockICard) FirstOrCreate() (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrCreate")
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrCreate indicates an expected call of FirstOrCreate.
func (mr *MockICardMockRecorder) FirstOrCreate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrCreate", reflect.TypeOf((*MockICard)(nil).FirstOrCreate))
}

// FirstOrInit mocks base method.
func (m *MockICard) FirstOrInit() (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstOrInit")
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirstOrInit indicates an expected call of FirstOrInit.
func (mr *MockICardMockRecorder) FirstOrInit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstOrInit", reflect.TypeOf((*MockICard)(nil).FirstOrInit))
}

// GetBySearchAndUserId mocks base method.
func (m *MockICard) GetBySearchAndUserId(search string, userId int64) ([]*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySearchAndUserId", search, userId)
	ret0, _ := ret[0].([]*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySearchAndUserId indicates an expected call of GetBySearchAndUserId.
func (mr *MockICardMockRecorder) GetBySearchAndUserId(search, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySearchAndUserId", reflect.TypeOf((*MockICard)(nil).GetBySearchAndUserId), search, userId)
}

// Group mocks base method.
func (m *MockICard) Group(cols ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Group", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockICardMockRecorder) Group(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockICard)(nil).Group), cols...)
}

// Having mocks base method.
func (m *MockICard) Having(conds ...gen.Condition) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Having", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Having indicates an expected call of Having.
func (mr *MockICardMockRecorder) Having(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Having", reflect.TypeOf((*MockICard)(nil).Having), conds...)
}

// Join mocks base method.
func (m *MockICard) Join(table schema.Tabler, on ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{table}
	for _, a := range on {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Join", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockICardMockRecorder) Join(table interface{}, on ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table}, on...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockICard)(nil).Join), varargs...)
}

// Joins mocks base method.
func (m *MockICard) Joins(fields ...field.RelationField) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Joins", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Joins indicates an expected call of Joins.
func (mr *MockICardMockRecorder) Joins(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Joins", reflect.TypeOf((*MockICard)(nil).Joins), fields...)
}

// Last mocks base method.
func (m *MockICard) Last() (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last")
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockICardMockRecorder) Last() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockICard)(nil).Last))
}

// LeftJoin mocks base method.
func (m *MockICard) LeftJoin(table schema.Tabler, on ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{table}
	for _, a := range on {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LeftJoin", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// LeftJoin indicates an expected call of LeftJoin.
func (mr *MockICardMockRecorder) LeftJoin(table interface{}, on ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table}, on...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeftJoin", reflect.TypeOf((*MockICard)(nil).LeftJoin), varargs...)
}

// Limit mocks base method.
func (m *MockICard) Limit(limit int) query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limit)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockICardMockRecorder) Limit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockICard)(nil).Limit), limit)
}

// Not mocks base method.
func (m *MockICard) Not(conds ...gen.Condition) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Not", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Not indicates an expected call of Not.
func (mr *MockICardMockRecorder) Not(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Not", reflect.TypeOf((*MockICard)(nil).Not), conds...)
}

// Offset mocks base method.
func (m *MockICard) Offset(offset int) query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", offset)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockICardMockRecorder) Offset(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockICard)(nil).Offset), offset)
}

// Omit mocks base method.
func (m *MockICard) Omit(cols ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range cols {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Omit", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Omit indicates an expected call of Omit.
func (mr *MockICardMockRecorder) Omit(cols ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Omit", reflect.TypeOf((*MockICard)(nil).Omit), cols...)
}

// Or mocks base method.
func (m *MockICard) Or(conds ...gen.Condition) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Or", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Or indicates an expected call of Or.
func (mr *MockICardMockRecorder) Or(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockICard)(nil).Or), conds...)
}

// Order mocks base method.
func (m *MockICard) Order(conds ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Order", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Order indicates an expected call of Order.
func (mr *MockICardMockRecorder) Order(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockICard)(nil).Order), conds...)
}

// Pluck mocks base method.
func (m *MockICard) Pluck(column field.Expr, dest interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pluck", column, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pluck indicates an expected call of Pluck.
func (mr *MockICardMockRecorder) Pluck(column, dest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pluck", reflect.TypeOf((*MockICard)(nil).Pluck), column, dest)
}

// Preload mocks base method.
func (m *MockICard) Preload(fields ...field.RelationField) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Preload", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Preload indicates an expected call of Preload.
func (mr *MockICardMockRecorder) Preload(fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preload", reflect.TypeOf((*MockICard)(nil).Preload), fields...)
}

// ReadDB mocks base method.
func (m *MockICard) ReadDB() query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDB")
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// ReadDB indicates an expected call of ReadDB.
func (mr *MockICardMockRecorder) ReadDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDB", reflect.TypeOf((*MockICard)(nil).ReadDB))
}

// ReplaceDB mocks base method.
func (m *MockICard) ReplaceDB(db *gorm.DB) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReplaceDB", db)
}

// ReplaceDB indicates an expected call of ReplaceDB.
func (mr *MockICardMockRecorder) ReplaceDB(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDB", reflect.TypeOf((*MockICard)(nil).ReplaceDB), db)
}

// Returning mocks base method.
func (m *MockICard) Returning(value interface{}, columns ...string) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Returning", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Returning indicates an expected call of Returning.
func (mr *MockICardMockRecorder) Returning(value interface{}, columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, columns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Returning", reflect.TypeOf((*MockICard)(nil).Returning), varargs...)
}

// RightJoin mocks base method.
func (m *MockICard) RightJoin(table schema.Tabler, on ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{table}
	for _, a := range on {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RightJoin", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// RightJoin indicates an expected call of RightJoin.
func (mr *MockICardMockRecorder) RightJoin(table interface{}, on ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{table}, on...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RightJoin", reflect.TypeOf((*MockICard)(nil).RightJoin), varargs...)
}

// Save mocks base method.
func (m *MockICard) Save(values ...*model.Card) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICardMockRecorder) Save(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICard)(nil).Save), values...)
}

// Scan mocks base method.
func (m *MockICard) Scan(result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", result)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockICardMockRecorder) Scan(result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockICard)(nil).Scan), result)
}

// ScanByPage mocks base method.
func (m *MockICard) ScanByPage(result interface{}, offset, limit int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanByPage", result, offset, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScanByPage indicates an expected call of ScanByPage.
func (mr *MockICardMockRecorder) ScanByPage(result, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanByPage", reflect.TypeOf((*MockICard)(nil).ScanByPage), result, offset, limit)
}

// Scopes mocks base method.
func (m *MockICard) Scopes(funcs ...func(gen.Dao) gen.Dao) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range funcs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scopes", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Scopes indicates an expected call of Scopes.
func (mr *MockICardMockRecorder) Scopes(funcs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scopes", reflect.TypeOf((*MockICard)(nil).Scopes), funcs...)
}

// Select mocks base method.
func (m *MockICard) Select(conds ...field.Expr) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockICardMockRecorder) Select(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockICard)(nil).Select), conds...)
}

// Session mocks base method.
func (m *MockICard) Session(config *gorm.Session) query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Session", config)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Session indicates an expected call of Session.
func (mr *MockICardMockRecorder) Session(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Session", reflect.TypeOf((*MockICard)(nil).Session), config)
}

// TableName mocks base method.
func (m *MockICard) TableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// TableName indicates an expected call of TableName.
func (mr *MockICardMockRecorder) TableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TableName", reflect.TypeOf((*MockICard)(nil).TableName))
}

// Take mocks base method.
func (m *MockICard) Take() (*model.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Take")
	ret0, _ := ret[0].(*model.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Take indicates an expected call of Take.
func (mr *MockICardMockRecorder) Take() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Take", reflect.TypeOf((*MockICard)(nil).Take))
}

// UnderlyingDB mocks base method.
func (m *MockICard) UnderlyingDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnderlyingDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// UnderlyingDB indicates an expected call of UnderlyingDB.
func (mr *MockICardMockRecorder) UnderlyingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnderlyingDB", reflect.TypeOf((*MockICard)(nil).UnderlyingDB))
}

// Unscoped mocks base method.
func (m *MockICard) Unscoped() query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unscoped")
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Unscoped indicates an expected call of Unscoped.
func (mr *MockICardMockRecorder) Unscoped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unscoped", reflect.TypeOf((*MockICard)(nil).Unscoped))
}

// Update mocks base method.
func (m *MockICard) Update(column field.Expr, value interface{}) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", column, value)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockICardMockRecorder) Update(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICard)(nil).Update), column, value)
}

// UpdateColumn mocks base method.
func (m *MockICard) UpdateColumn(column field.Expr, value interface{}) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumn", column, value)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumn indicates an expected call of UpdateColumn.
func (mr *MockICardMockRecorder) UpdateColumn(column, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumn", reflect.TypeOf((*MockICard)(nil).UpdateColumn), column, value)
}

// UpdateColumnSimple mocks base method.
func (m *MockICard) UpdateColumnSimple(columns ...field.AssignExpr) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateColumnSimple", varargs...)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumnSimple indicates an expected call of UpdateColumnSimple.
func (mr *MockICardMockRecorder) UpdateColumnSimple(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumnSimple", reflect.TypeOf((*MockICard)(nil).UpdateColumnSimple), columns...)
}

// UpdateColumns mocks base method.
func (m *MockICard) UpdateColumns(value interface{}) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateColumns", value)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateColumns indicates an expected call of UpdateColumns.
func (mr *MockICardMockRecorder) UpdateColumns(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateColumns", reflect.TypeOf((*MockICard)(nil).UpdateColumns), value)
}

// UpdateFrom mocks base method.
func (m *MockICard) UpdateFrom(q gen.SubQuery) gen.Dao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFrom", q)
	ret0, _ := ret[0].(gen.Dao)
	return ret0
}

// UpdateFrom indicates an expected call of UpdateFrom.
func (mr *MockICardMockRecorder) UpdateFrom(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFrom", reflect.TypeOf((*MockICard)(nil).UpdateFrom), q)
}

// UpdateSimple mocks base method.
func (m *MockICard) UpdateSimple(columns ...field.AssignExpr) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range columns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateSimple", varargs...)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSimple indicates an expected call of UpdateSimple.
func (mr *MockICardMockRecorder) UpdateSimple(columns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimple", reflect.TypeOf((*MockICard)(nil).UpdateSimple), columns...)
}

// Updates mocks base method.
func (m *MockICard) Updates(value interface{}) (gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Updates", value)
	ret0, _ := ret[0].(gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Updates indicates an expected call of Updates.
func (mr *MockICardMockRecorder) Updates(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Updates", reflect.TypeOf((*MockICard)(nil).Updates), value)
}

// Where mocks base method.
func (m *MockICard) Where(conds ...gen.Condition) query.ICardDo {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockICardMockRecorder) Where(conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockICard)(nil).Where), conds...)
}

// WithContext mocks base method.
func (m *MockICard) WithContext(ctx context.Context) query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockICardMockRecorder) WithContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockICard)(nil).WithContext), ctx)
}

// WithResult mocks base method.
func (m *MockICard) WithResult(fc func(gen.Dao)) gen.ResultInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithResult", fc)
	ret0, _ := ret[0].(gen.ResultInfo)
	return ret0
}

// WithResult indicates an expected call of WithResult.
func (mr *MockICardMockRecorder) WithResult(fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithResult", reflect.TypeOf((*MockICard)(nil).WithResult), fc)
}

// WriteDB mocks base method.
func (m *MockICard) WriteDB() query.ICardDo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteDB")
	ret0, _ := ret[0].(query.ICardDo)
	return ret0
}

// WriteDB indicates an expected call of WriteDB.
func (mr *MockICardMockRecorder) WriteDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteDB", reflect.TypeOf((*MockICard)(nil).WriteDB))
}

// underlyingDB mocks base method.
func (m *MockICard) underlyingDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "underlyingDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// underlyingDB indicates an expected call of underlyingDB.
func (mr *MockICardMockRecorder) underlyingDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "underlyingDB", reflect.TypeOf((*MockICard)(nil).underlyingDB))
}

// underlyingDO mocks base method.
func (m *MockICard) underlyingDO() *gen.DO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "underlyingDO")
	ret0, _ := ret[0].(*gen.DO)
	return ret0
}

// underlyingDO indicates an expected call of underlyingDO.
func (mr *MockICardMockRecorder) underlyingDO() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "underlyingDO", reflect.TypeOf((*MockICard)(nil).underlyingDO))
}
