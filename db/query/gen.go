// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	BookCard       *bookCard
	Card           *card
	Plan           *plan
	Task           *task
	TaskCardRecord *taskCardRecord
	TaskLog        *taskLog
	User           *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	BookCard = &Q.BookCard
	Card = &Q.Card
	Plan = &Q.Plan
	Task = &Q.Task
	TaskCardRecord = &Q.TaskCardRecord
	TaskLog = &Q.TaskLog
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		BookCard:       newBookCard(db, opts...),
		Card:           newCard(db, opts...),
		Plan:           newPlan(db, opts...),
		Task:           newTask(db, opts...),
		TaskCardRecord: newTaskCardRecord(db, opts...),
		TaskLog:        newTaskLog(db, opts...),
		User:           newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	BookCard       bookCard
	Card           card
	Plan           plan
	Task           task
	TaskCardRecord taskCardRecord
	TaskLog        taskLog
	User           user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		BookCard:       q.BookCard.clone(db),
		Card:           q.Card.clone(db),
		Plan:           q.Plan.clone(db),
		Task:           q.Task.clone(db),
		TaskCardRecord: q.TaskCardRecord.clone(db),
		TaskLog:        q.TaskLog.clone(db),
		User:           q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		BookCard:       q.BookCard.replaceDB(db),
		Card:           q.Card.replaceDB(db),
		Plan:           q.Plan.replaceDB(db),
		Task:           q.Task.replaceDB(db),
		TaskCardRecord: q.TaskCardRecord.replaceDB(db),
		TaskLog:        q.TaskLog.replaceDB(db),
		User:           q.User.replaceDB(db),
	}
}

type queryCtx struct {
	BookCard       IBookCardDo
	Card           ICardDo
	Plan           IPlanDo
	Task           ITaskDo
	TaskCardRecord ITaskCardRecordDo
	TaskLog        ITaskLogDo
	User           IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		BookCard:       q.BookCard.WithContext(ctx),
		Card:           q.Card.WithContext(ctx),
		Plan:           q.Plan.WithContext(ctx),
		Task:           q.Task.WithContext(ctx),
		TaskCardRecord: q.TaskCardRecord.WithContext(ctx),
		TaskLog:        q.TaskLog.WithContext(ctx),
		User:           q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
